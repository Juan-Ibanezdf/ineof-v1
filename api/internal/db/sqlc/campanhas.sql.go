// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: campanhas.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCampanha = `-- name: CreateCampanha :one
INSERT INTO campanhas (id, nome, imagem, data_inicio, data_fim, equipe, localizacao, objetivos, contato, status, notas, descricao)
VALUES ($1, $2, $3, $4, $5, $6, ST_GeomFromText($7, 4326), $8, $9, $10, $11, $12)
RETURNING id, nome, imagem, data_inicio, data_fim, equipe, localizacao, objetivos, contato, status, notas, descricao
`

type CreateCampanhaParams struct {
	ID             uuid.UUID      `json:"id"`
	Nome           string         `json:"nome"`
	Imagem         sql.NullString `json:"imagem"`
	DataInicio     sql.NullTime   `json:"data_inicio"`
	DataFim        sql.NullTime   `json:"data_fim"`
	Equipe         sql.NullString `json:"equipe"`
	StGeomfromtext interface{}    `json:"st_geomfromtext"`
	Objetivos      sql.NullString `json:"objetivos"`
	Contato        sql.NullString `json:"contato"`
	Status         sql.NullString `json:"status"`
	Notas          sql.NullString `json:"notas"`
	Descricao      sql.NullString `json:"descricao"`
}

// Criar uma nova campanha
func (q *Queries) CreateCampanha(ctx context.Context, arg CreateCampanhaParams) (Campanha, error) {
	row := q.db.QueryRowContext(ctx, createCampanha,
		arg.ID,
		arg.Nome,
		arg.Imagem,
		arg.DataInicio,
		arg.DataFim,
		arg.Equipe,
		arg.StGeomfromtext,
		arg.Objetivos,
		arg.Contato,
		arg.Status,
		arg.Notas,
		arg.Descricao,
	)
	var i Campanha
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Imagem,
		&i.DataInicio,
		&i.DataFim,
		&i.Equipe,
		&i.Localizacao,
		&i.Objetivos,
		&i.Contato,
		&i.Status,
		&i.Notas,
		&i.Descricao,
	)
	return i, err
}

const deleteCampanha = `-- name: DeleteCampanha :exec
DELETE FROM campanhas WHERE id = $1
`

// Deletar uma campanha
func (q *Queries) DeleteCampanha(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCampanha, id)
	return err
}

const getCampanhaByID = `-- name: GetCampanhaByID :one
SELECT id, nome, imagem, data_inicio, data_fim, equipe, localizacao, objetivos, contato, status, notas, descricao FROM campanhas WHERE id = $1
`

// Buscar uma campanha pelo ID
func (q *Queries) GetCampanhaByID(ctx context.Context, id uuid.UUID) (Campanha, error) {
	row := q.db.QueryRowContext(ctx, getCampanhaByID, id)
	var i Campanha
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Imagem,
		&i.DataInicio,
		&i.DataFim,
		&i.Equipe,
		&i.Localizacao,
		&i.Objetivos,
		&i.Contato,
		&i.Status,
		&i.Notas,
		&i.Descricao,
	)
	return i, err
}

const listCampanhas = `-- name: ListCampanhas :many
SELECT id, nome, imagem, data_inicio, data_fim, equipe, localizacao, objetivos, contato, status, notas, descricao FROM campanhas ORDER BY data_inicio DESC
`

// Listar todas as campanhas
func (q *Queries) ListCampanhas(ctx context.Context) ([]Campanha, error) {
	rows, err := q.db.QueryContext(ctx, listCampanhas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campanha{}
	for rows.Next() {
		var i Campanha
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Imagem,
			&i.DataInicio,
			&i.DataFim,
			&i.Equipe,
			&i.Localizacao,
			&i.Objetivos,
			&i.Contato,
			&i.Status,
			&i.Notas,
			&i.Descricao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampanha = `-- name: UpdateCampanha :one
UPDATE campanhas
SET 
    nome = $2,
    imagem = $3,
    data_inicio = $4,
    data_fim = $5,
    equipe = $6,
    localizacao = ST_GeomFromText($7, 4326),
    objetivos = $8,
    contato = $9,
    status = $10,
    notas = $11,
    descricao = $12
WHERE id = $1
RETURNING id, nome, imagem, data_inicio, data_fim, equipe, localizacao, objetivos, contato, status, notas, descricao
`

type UpdateCampanhaParams struct {
	ID             uuid.UUID      `json:"id"`
	Nome           string         `json:"nome"`
	Imagem         sql.NullString `json:"imagem"`
	DataInicio     sql.NullTime   `json:"data_inicio"`
	DataFim        sql.NullTime   `json:"data_fim"`
	Equipe         sql.NullString `json:"equipe"`
	StGeomfromtext interface{}    `json:"st_geomfromtext"`
	Objetivos      sql.NullString `json:"objetivos"`
	Contato        sql.NullString `json:"contato"`
	Status         sql.NullString `json:"status"`
	Notas          sql.NullString `json:"notas"`
	Descricao      sql.NullString `json:"descricao"`
}

// Atualizar uma campanha existente
func (q *Queries) UpdateCampanha(ctx context.Context, arg UpdateCampanhaParams) (Campanha, error) {
	row := q.db.QueryRowContext(ctx, updateCampanha,
		arg.ID,
		arg.Nome,
		arg.Imagem,
		arg.DataInicio,
		arg.DataFim,
		arg.Equipe,
		arg.StGeomfromtext,
		arg.Objetivos,
		arg.Contato,
		arg.Status,
		arg.Notas,
		arg.Descricao,
	)
	var i Campanha
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Imagem,
		&i.DataInicio,
		&i.DataFim,
		&i.Equipe,
		&i.Localizacao,
		&i.Objetivos,
		&i.Contato,
		&i.Status,
		&i.Notas,
		&i.Descricao,
	)
	return i, err
}
